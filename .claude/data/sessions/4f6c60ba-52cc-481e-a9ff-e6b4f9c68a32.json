{
  "session_id": "4f6c60ba-52cc-481e-a9ff-e6b4f9c68a32",
  "prompts": [
    "here is the serena workflow: # {PROJECT_NAME} - CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n# CRITICAL: SERENA-FIRST RULE - READ THIS FIRST\n  BEFORE doing ANYTHING else, when you see ANY code development scenario:\n  - STOP and check if Serena MCP is available & IF onboarding is performed\n  - Use Serena MCP Workflow Guidelines to explore code structure\n  - Use Symbol-Based Code Navigation to understand context\n  - Use Efficient Code Modification patterns\n  - Always: Store insights with memory management\nVIOLATION CHECK: If you used TodoWrite first, you violated this rule. Stop and restart with Serena-First Development Approach.\n\n## Project Overview\n{PROJECT_DESCRIPTION}\n\n**Status**: {PROJECT_STATUS}\n**Tech Stack**: {TECH_STACK}\n\n## Development Commands\n\n### Serena-First Development Approach\n- **Before debugging**: Use Serena workflows to explore structure\n- **Before modifying**: Use symbol navigation to understand context\n- **Always**: Store insights with memory management\n\n### Core Commands\n- **Never read entire files**: Use symbol overview first, then targeted `find_symbol`\n- **Symbol-first approach**: Navigate by functions/classes, not file browsing\n- **Memory-driven**: Store insights across sessions for faster future work\n- **Think before acting**: Use reflection tools before major changes\n\n## Serena MCP Core Commands & Workflow Patterns\n\nThis section defines the core Serena commands and shows how to combine them into effective workflows. Avoid reading full files and prefer these symbol-based patterns.\n\n### 1. Core Commands Reference\n\n#### Exploration & Navigation\n```bash\n# Get a high-level overview of a file's structure (classes, functions)\nmcp__serena__get_symbols_overview --relative_path=\"<PATH/TO/FILE>\"\n\n# List files and directories\nmcp__serena__list_dir --relative_path=\"<PATH>\" --recursive=true\n\n# Find files by a name pattern\nmcp__serena__find_file --file_mask=\"*.<EXT>\" --relative_path=\"<PATH>\"\n\n# Find a specific function/class by name (use include_body=true only when ready to edit)\nmcp__serena__find_symbol --name_path=\"<SYMBOL_NAME>\" --include_body=false\n\n# Find where a symbol is used\nmcp__serena__find_referencing_symbols --name_path=\"<SYMBOL_NAME>\"\n\n# Search for a raw text pattern across code files\nmcp__serena__search_for_pattern --substring_pattern=\"<PATTERN>\"\n```\n\n#### Code Modification\n```bash\n# Replace the body of an entire function or class\nmcp__serena__replace_symbol_body --name_path=\"<FUNCTION_NAME>\" --relative_path=\"<PATH/TO/FILE>\"\n\n# Insert code after a specific symbol\nmcp__serena__insert_after_symbol --name_path=\"<ANCHOR_SYMBOL>\" --relative_path=\"<PATH/TO/FILE>\"\n\n# Insert code before a specific symbol (e.g., for imports)\nmcp__serena__insert_before_symbol --name_path=\"<FIRST_SYMBOL_IN_FILE>\" --relative_path=\"<PATH/TO/FILE>\"\n```\n\n#### Memory & Reflection\n```bash\n# Store insights for future sessions\nmcp__serena__write_memory --memory_name=\"<MEMORY_NAME>\" --content=\"<INSIGHT_TEXT>\"\n\n# Review stored insights\nmcp__serena__list_memories\nmcp__serena__read_memory --memory_file_name=\"<MEMORY_FILE_NAME>\"\n\n# Reflect on collected information and task adherence\nmcp__serena__think_about_collected_information\nmcp__serena__think_about_task_adherence\n```\n\n### 2. Workflow Patterns\n\n#### Initial Codebase Onboarding\n```bash\n# 1. Ensure Serena is ready\nmcp__serena__check_onboarding_performed\n\n# 2. Get the project layout\nmcp__serena__list_dir --relative_path=\".\" --recursive=false\nmcp__serena__list_dir --relative_path=\"<SRC_DIR>\" --recursive=true\n\n# 3. Get a high-level overview of key files (do NOT read them)\nmcp__serena__get_symbols_overview --relative_path=\"<PATH/TO/KEY_FILE_1>\"\nmcp__serena__get_symbols_overview --relative_path=\"<PATH/TO/KEY_FILE_2>\"\n```\n\n#### Investigating a Feature or Bug\n```bash\n# 1. Find relevant symbols related to the feature\nmcp__serena__find_symbol --name_path=\"<FEATURE_NAME>*\" --substring_matching=true\n\n# 2. Understand how a key function is used\nmcp__serena__find_referencing_symbols --name_path=\"<KEY_FUNCTION>\"\n\n# 3. Examine the function's implementation only when necessary\nmcp__serena__find_symbol --name_path=\"<KEY_FUNCTION>\" --include_body=true\n```\n\n#### Safely Modifying Code\n```bash\n# 1. Find all references before changing a function to understand the impact\nmcp__serena__find_referencing_symbols --name_path=\"<FUNCTION_TO_CHANGE>\"\n\n# 2. Replace the function body with the updated implementation\nmcp__serena__replace_symbol_body --name_path=\"<FUNCTION_TO_CHANGE>\" --relative_path=\"<PATH/TO/FILE>\"\n\n# 3. Add a new helper function after an existing one\nmcp__serena__insert_after_symbol --name_path=\"<EXISTING_FUNCTION>\" --relative_path=\"<PATH/TO/FILE>\"\n```\n\n## {DOMAIN_NAME} Guidelines\n{DOMAIN_GUIDELINES}\n\n## Quality Standards\n[Serena-enhanced quality patterns]\n```",
    "can you edit the @.claude/commands/build.md and the @.claude/commands/quick-plan.md  to use the serena workflow. ",
    "update the @.claude/commands/update-claude.md command to use the serena workflow. take note that i added the serena template for claude at the end of the file as that is how i want the claude.md to read. ",
    "you would have to remove git analysis right? or no?",
    "ok then just make the command cleaner so that it follows our template structure here @ai-docs/custom-command-template.md "
  ]
}