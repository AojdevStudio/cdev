{
  "identity": {
    "agentId": "workflow_scripts_agent",
    "taskId": "script_conv_1752290180528_workflow_scripts_agent",
    "agentRole": "Convert Workflow Scripts to Python",
    "focusArea": "Git operations and conflict handling",
    "taskSource": "RAPID_SCRIPT_CONVERSION_PLAN.md"
  },
  "execution": {
    "canStartImmediately": true,
    "dependencies": [],
    "estimatedTime": 30
  },
  "deliverables": {
    "tasks": [
      "Convert validate-parallel-work.sh to validate-parallel-work.py",
      "Convert integrate-parallel-work.sh to integrate-parallel-work.py",
      "Convert resolve-conflicts.sh to resolve-conflicts.py"
    ],
    "filesToCreate": [
      "scripts/python/validate-parallel-work.py",
      "scripts/python/integrate-parallel-work.py",
      "scripts/python/resolve-conflicts.py"
    ],
    "validationCriteria": [
      "All scripts converted with UV shebang and inline metadata",
      "YAML output replaces JSON output",
      "Click CLI for command-line arguments",
      "Scripts are executable (chmod +x)",
      "Basic smoke tests pass"
    ],
    "conversionPatterns": {
      "header": "#!/usr/bin/env -S uv run --script\n# /// script\n# requires-python = \">=3.11\"\n# dependencies = [\n#   \"pyyaml>=6.0\",\n#   \"click>=8.1\", \n#   \"rich>=13.0\"\n# ]\n# ///",
      "yamlSave": "def save_yaml(data, filepath):\n    with open(filepath, 'w') as f:\n        yaml.dump(data, f, default_flow_style=False, sort_keys=False)",
      "gitCommand": "def run_git(args):\n    return subprocess.run(['git'] + args, capture_output=True, text=True)"
    }
  },
  "orchestration": {
    "phase": 1,
    "concurrentWith": [
      "simple_scripts_agent",
      "agent_scripts_agent",
      "complex_scripts_agent",
      "publishing_scripts_agent"
    ]
  }
}
