#!/usr/bin/env uv run
# /// script
# requires-python = ">=3.8"
# ///

"""
Clean VTT Files Script

This script safely deletes .vtt files from the repository root directory.
It is designed to clean up video transcript files generated by yt-dlp.

Usage:
    ./scripts/clean-vtt-files.py

Features:
- Only targets .vtt files in the repository root (not subdirectories)
- Provides clear output showing what files are being deleted
- Includes proper error handling and safety checks
- Requires user confirmation before deletion
- Shows file sizes and modification dates for transparency
"""

import os
import sys
import glob
from pathlib import Path
from datetime import datetime


def get_repo_root() -> Path:
    """Find the repository root directory."""
    current_dir = Path.cwd()
    
    # Look for common repository indicators
    repo_indicators = ['.git', 'CLAUDE.md', 'README.md']
    
    for indicator in repo_indicators:
        if (current_dir / indicator).exists():
            return current_dir
    
    # If no indicators found, assume current directory is repo root
    return current_dir


def format_file_size(size_bytes: int) -> str:
    """Format file size in human-readable format."""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    else:
        return f"{size_bytes / (1024 * 1024):.1f} MB"


def format_modification_time(timestamp: float) -> str:
    """Format file modification time."""
    return datetime.fromtimestamp(timestamp).strftime("%Y-%m-%d %H:%M:%S")


def find_vtt_files(repo_root: Path) -> list[Path]:
    """Find all .vtt files in the repository root directory."""
    vtt_pattern = str(repo_root / "*.vtt")
    vtt_files = [Path(f) for f in glob.glob(vtt_pattern)]
    
    # Ensure we only get files from the root directory (not subdirectories)
    root_vtt_files = [f for f in vtt_files if f.parent == repo_root]
    
    return sorted(root_vtt_files)


def display_files_info(vtt_files: list[Path]):
    """Display information about the VTT files to be deleted."""
    print(f"\nFound {len(vtt_files)} .vtt file(s) in repository root:")
    print("-" * 80)
    
    for file_path in vtt_files:
        try:
            stat = file_path.stat()
            size = format_file_size(stat.st_size)
            modified = format_modification_time(stat.st_mtime)
            print(f"  üìπ {file_path.name}")
            print(f"     Size: {size} | Modified: {modified}")
        except (OSError, IOError) as e:
            print(f"  üìπ {file_path.name} (Error reading file info: {e})")
        print()


def confirm_deletion() -> bool:
    """Ask user for confirmation before deleting files."""
    while True:
        response = input("Do you want to delete these files? [y/N]: ").strip().lower()
        if response in ['y', 'yes']:
            return True
        elif response in ['n', 'no', '']:
            return False
        else:
            print("Please enter 'y' for yes or 'n' for no.")


def delete_files(vtt_files: list[Path]) -> tuple[list[Path], list[tuple[Path, str]]]:
    """
    Delete the VTT files and return lists of successful and failed deletions.
    
    Returns:
        tuple: (successfully_deleted, failed_deletions)
               failed_deletions is a list of (file_path, error_message) tuples
    """
    successfully_deleted = []
    failed_deletions = []
    
    for file_path in vtt_files:
        try:
            file_path.unlink()  # Delete the file
            successfully_deleted.append(file_path)
            print(f"‚úÖ Deleted: {file_path.name}")
        except (OSError, IOError) as e:
            failed_deletions.append((file_path, str(e)))
            print(f"‚ùå Failed to delete: {file_path.name} - {e}")
    
    return successfully_deleted, failed_deletions


def main():
    """Main function to orchestrate the VTT file cleanup."""
    print("üßπ VTT File Cleanup Script")
    print("=" * 50)
    
    try:
        # Find repository root
        repo_root = get_repo_root()
        print(f"Repository root: {repo_root}")
        
        # Find VTT files in the root directory
        vtt_files = find_vtt_files(repo_root)
        
        if not vtt_files:
            print("\n‚ú® No .vtt files found in the repository root directory.")
            print("Nothing to clean up!")
            return 0
        
        # Display file information
        display_files_info(vtt_files)
        
        # Get user confirmation
        if not confirm_deletion():
            print("\nüö´ Deletion cancelled by user.")
            return 0
        
        # Delete files
        print("\nüóëÔ∏è  Deleting files...")
        successfully_deleted, failed_deletions = delete_files(vtt_files)
        
        # Summary
        print("\nüìä Summary:")
        print(f"   Successfully deleted: {len(successfully_deleted)} file(s)")
        if failed_deletions:
            print(f"   Failed to delete: {len(failed_deletions)} file(s)")
            print("\n‚ùå Failed deletions:")
            for file_path, error in failed_deletions:
                print(f"   - {file_path.name}: {error}")
            return 1
        else:
            print("   All files deleted successfully! ‚ú®")
            return 0
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Operation cancelled by user (Ctrl+C)")
        return 130
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())