#!/bin/bash
# Generated Cleanup Script for Parallel Agents
# Tasks: AOJ-101 (Complete), REMEDIATION-001 (Complete)
# Generated: $(date)
# Generated by: Agent Cleanup Specialist

set -e  # Exit on any error

echo "üßπ =============================================="
echo "   PARALLEL AGENT CLEANUP SCRIPT"
echo "   Tasks: AOJ-101, REMEDIATION-001"
echo "   Status: All agents successfully integrated"
echo "=============================================="
echo ""

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Safety check: verify we're on main branch
echo "üîç Safety Check: Verifying current branch..."
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo -e "${RED}‚ùå ERROR: Must be on main branch for cleanup${NC}"
    echo -e "${YELLOW}   Current branch: $CURRENT_BRANCH${NC}"
    echo -e "${BLUE}   Run: git checkout main${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Confirmed on main branch${NC}"
echo ""

# Verify integration status
echo "üìä Integration Status Verification..."
echo "   Checking for recent merge commits..."

# Check for AOJ-101 integration
AOJ_101_MERGES=$(git log --oneline --grep="Merge agent work" | grep -E "(installer|hook_system|configuration|cross_platform|integration)" | wc -l)
if [ "$AOJ_101_MERGES" -ge 5 ]; then
    echo -e "${GREEN}‚úÖ AOJ-101 agents integrated ($AOJ_101_MERGES/5 merge commits found)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  AOJ-101 integration incomplete ($AOJ_101_MERGES/5 merge commits found)${NC}"
fi

# Check for REMEDIATION-001 integration  
REMEDIATION_MERGES=$(git log --oneline --grep="test_framework_agent" | wc -l)
if [ "$REMEDIATION_MERGES" -ge 1 ]; then
    echo -e "${GREEN}‚úÖ REMEDIATION-001 test_framework_agent integrated${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  REMEDIATION-001 integration not found${NC}"
fi
echo ""

# Remove integrated worktrees
echo "üóÇÔ∏è Removing Integrated Worktrees..."

# Check if REMEDIATION-001-test_framework_agent worktree exists
WORKTREE_PATH="../paralell-development-claude-work-trees/REMEDIATION-001-test_framework_agent"
if [ -d "$WORKTREE_PATH" ]; then
    echo "   Removing: $WORKTREE_PATH"
    if git worktree remove "$WORKTREE_PATH" --force; then
        echo -e "${GREEN}   ‚úÖ Worktree removed successfully${NC}"
    else
        echo -e "${RED}   ‚ùå Failed to remove worktree${NC}"
    fi
else
    echo -e "${YELLOW}   ‚ö†Ô∏è  Worktree not found: $WORKTREE_PATH${NC}"
fi
echo ""

# Delete merged branches
echo "üåø Deleting Merged Branches..."

# Check if REMEDIATION-001-test_framework_agent branch exists
if git branch | grep -q "REMEDIATION-001-test_framework_agent"; then
    echo "   Deleting: REMEDIATION-001-test_framework_agent"
    if git branch -d REMEDIATION-001-test_framework_agent; then
        echo -e "${GREEN}   ‚úÖ Branch deleted successfully${NC}"
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  Branch deletion failed (possibly not fully merged)${NC}"
        echo -e "${BLUE}   Use: git branch -D REMEDIATION-001-test_framework_agent (force delete)${NC}"
    fi
else
    echo -e "${YELLOW}   ‚ö†Ô∏è  Branch not found: REMEDIATION-001-test_framework_agent${NC}"
fi
echo ""

# Clean up coordination files
echo "üìÅ Cleaning Coordination Files..."

COORDINATION_DIR="../paralell-development-claude-work-trees/coordination"
if [ -d "$COORDINATION_DIR" ]; then
    echo "   Removing coordination directory: $COORDINATION_DIR"
    if rm -rf "$COORDINATION_DIR"; then
        echo -e "${GREEN}   ‚úÖ Coordination directory removed${NC}"
    else
        echo -e "${RED}   ‚ùå Failed to remove coordination directory${NC}"
    fi
else
    echo -e "${YELLOW}   ‚ö†Ô∏è  Coordination directory not found${NC}"
fi

# Clean up work-trees directory if empty (except .DS_Store)
WORKTREES_DIR="../paralell-development-claude-work-trees"
if [ -d "$WORKTREES_DIR" ]; then
    # Count non-hidden files (excluding .DS_Store)
    FILE_COUNT=$(find "$WORKTREES_DIR" -mindepth 1 -maxdepth 1 ! -name ".*" | wc -l)
    if [ "$FILE_COUNT" -eq 0 ]; then
        echo "   Work-trees directory is empty, removing..."
        if rm -rf "$WORKTREES_DIR"; then
            echo -e "${GREEN}   ‚úÖ Empty work-trees directory removed${NC}"
        else
            echo -e "${RED}   ‚ùå Failed to remove work-trees directory${NC}"
        fi
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  Work-trees directory not empty ($FILE_COUNT items remaining)${NC}"
        echo "   Contents:"
        ls -la "$WORKTREES_DIR" | grep -v "^total" | tail -n +2 | sed 's/^/     /'
    fi
fi
echo ""

# Handle validation report
echo "üìã Handling Validation Report..."
VALIDATION_REPORT="validation/aoj-101-agent-final-validation-report.json"
if [ -f "$VALIDATION_REPORT" ]; then
    echo "   Found validation report: $VALIDATION_REPORT"
    echo -e "${BLUE}   üìù This file contains important validation results${NC}"
    echo -e "${BLUE}   üí° Recommend committing this file for future reference${NC}"
    echo -e "${BLUE}   Run: git add $VALIDATION_REPORT && git commit -m \"docs: add AOJ-101 agent validation report\"${NC}"
else
    echo -e "${YELLOW}   ‚ö†Ô∏è  Validation report not found${NC}"
fi
echo ""

# Clean up log files
echo "üìù Cleaning Up Log Files..."
if [ -d "logs" ]; then
    echo "   Found modified log files..."
    # Check if logs are in gitignore
    if git check-ignore logs/ >/dev/null 2>&1; then
        echo "   Logs are properly ignored by git"
        echo -e "${BLUE}   üí° Log files are tracked for development but ignored in git${NC}"
        echo -e "${BLUE}   These files are safe to leave as-is or clean manually${NC}"
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  Log files are not in .gitignore${NC}"
        echo -e "${BLUE}   üí° Consider adding logs/ to .gitignore to prevent future conflicts${NC}"
    fi
else
    echo -e "${YELLOW}   ‚ö†Ô∏è  No logs directory found${NC}"
fi
echo ""

# Final verification
echo "üîç Final Verification..."
echo "   Checking remaining worktrees:"
REMAINING_WORKTREES=$(git worktree list | grep -v "$(pwd)" | wc -l)
if [ "$REMAINING_WORKTREES" -eq 0 ]; then
    echo -e "${GREEN}   ‚úÖ No remaining agent worktrees${NC}"
else
    echo -e "${YELLOW}   ‚ö†Ô∏è  $REMAINING_WORKTREES worktree(s) still exist:${NC}"
    git worktree list | grep -v "$(pwd)" | sed 's/^/     /'
fi

echo "   Checking remaining agent branches:"
REMAINING_BRANCHES=$(git branch | grep -E "(AOJ-|REMEDIATION-)" | wc -l)
if [ "$REMAINING_BRANCHES" -eq 0 ]; then
    echo -e "${GREEN}   ‚úÖ No remaining agent branches${NC}"
else
    echo -e "${YELLOW}   ‚ö†Ô∏è  $REMAINING_BRANCHES agent branch(es) still exist:${NC}"
    git branch | grep -E "(AOJ-|REMEDIATION-)" | sed 's/^/     /'
fi
echo ""

# Summary
echo "üìä Cleanup Summary"
echo "=================="
echo -e "${GREEN}‚úÖ Integrated Agents:${NC}"
echo "   ‚Ä¢ AOJ-101: installer_orchestrator_agent"
echo "   ‚Ä¢ AOJ-101: hook_system_agent" 
echo "   ‚Ä¢ AOJ-101: configuration_agent"
echo "   ‚Ä¢ AOJ-101: cross_platform_agent"
echo "   ‚Ä¢ AOJ-101: integration_agent"
echo "   ‚Ä¢ REMEDIATION-001: test_framework_agent"
echo ""
echo -e "${BLUE}üìã Actions Completed:${NC}"
echo "   ‚Ä¢ Removed integrated worktrees"
echo "   ‚Ä¢ Deleted merged branches"
echo "   ‚Ä¢ Cleaned coordination files"
echo "   ‚Ä¢ Verified repository state"
echo ""
echo -e "${YELLOW}üí° Recommended Next Steps:${NC}"
echo "   1. Commit validation report (if exists)"
echo "   2. Push changes to remote: git push origin main"
echo "   3. Consider creating a release tag"
echo "   4. Verify package functionality with npm test"
echo ""
echo -e "${GREEN}üéâ Parallel Agent Cleanup Complete!${NC}"
echo "   Repository is clean and ready for production"
echo "=============================================="

# Exit successfully
exit 0